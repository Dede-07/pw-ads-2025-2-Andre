import * as React from 'react'
// üê® voc√™ vai precisar dos seguintes itens de '../pokemon':
// fetchPokemon: a fun√ß√£o que retorna as informa√ß√µes do pok√©mon
// PokemonInfoFallback: o que √© exibido enquanto as informa√ß√µes do pok√©mon
// s√£o carregadas
// PokemonDataView: o componente usado para exibir as informa√ß√µes do pok√©mon
import {PokemonForm, fetchPokemon, PokemonInfoFallback, PokemonDataView} from '../pokemon'

function PokemonInfo({pokemonName}) {
  
  // üê® crie o estado para o pok√©mon (null)
  const [pokemon, setPokemon] = React.useState(null)
  const [error, setError] = React.useState(null)

  // üê® crie React.useEffect de modo a ser chamado sempre que pokemonName mudar.
  // üí∞ N√ÉO SE ESQUE√áA DO VETOR DE DEPEND√äNCIAS!
  React.useEffect(() => {
    // üí∞ se pokemonName √© falso (ou uma string vazia) n√£o se preocupe em fazer 
    // a requisi√ß√£o (retorne precocemente).
    if (!pokemonName) return

    // üê® antes de chamar `fetchPokemon`, limpe o estado atual do pokemon
    // ajustando-o para null.
    setPokemon(null)
    setError(null)

    // evitar atualiza√ß√µes ap√≥s o componente ser desmontado
    let cancelled = false

    // üí∞ Use a fun√ß√£o `fetchPokemon` para buscar um pok√©mon pelo seu nome:
    //   fetchPokemon('Pikachu').then(
    //     pokemonData => {/* atualize todos os estados aqui */},
    //   )
    fetchPokemon(pokemonName)
      .then(p => {
        if (!cancelled) setPokemon(p)
      })
      .catch(err => {
        if (!cancelled) setError(err)
      })

    return () => {
      cancelled = true
    }
  }, [pokemonName])

  // üê® return the following things based on the `pokemon` state and `pokemonName` prop:
  // üê® retorne o seguinte baseado nos estados `pokemon` e `pokemonName`:
  //   1. n√£o h√° pokemonName: 'Informe um pok√©mon'
  //   2. tem pokemonName mas n√£o pokemon: <PokemonInfoFallback name={pokemonName} />
  //   3. tem pokemon: <PokemonDataView pokemon={pokemon} />

  if (!pokemonName) {
    return 'Informe um pok√©mon'
  }

  if (error) {
    return <div role="alert">Erro ao buscar pok√©mon: {error.message}</div>
  }

  if (!pokemon) {
    return <PokemonInfoFallback name={pokemonName} />
  }

  return <PokemonDataView pokemon={pokemon} />
  // üí£ remova isso
}
// ...existing code...
function Exercicio06() {
  const [pokemonName, setPokemonName] = React.useState('')

  function handleSubmit(newPokemonName) {
    setPokemonName(newPokemonName)
  }

  return (
    <div className="pokemon-info-app">
      <PokemonForm pokemonName={pokemonName} onSubmit={handleSubmit} />
      <hr />
      <div className="pokemon-info">
        <PokemonInfo pokemonName={pokemonName} />
      </div>
    </div>
  )
}

export default Exercicio06